name: "Monitor Queue Logs"
description: "Monitors logs from queue events and handles test coverage artifacts"

inputs:
  event-type:
    description: "Type of event being monitored"
    required: true
  event-name:
    description: "Name of the event"
    required: true
  event-script:
    description: "Script to execute in the container"
    required: true
  azure-client-id:
    description: "Azure Client ID"
    required: true
  azure-tenant-id:
    description: "Azure Tenant ID"
    required: true
  azure-subscription-id:
    description: "Azure Subscription ID"
    required: true
  azure-queue-storage-account:
    description: "Azure Queue Storage Account"
    required: true
  azure-blob-storage:
    description: "Azure Blob Storage Container"
    required: true
  azure-queue-name:
    description: "Name of the Azure queue"
    required: true
  is-unit-test:
    description: "Upload coverage as unit test"
    required: false
    default: "false"
  timeout:
    description: "Max wait time for logs in minutes"
    required: false
    default: "10"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Azure Storage SDK
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install azure-storage-queue azure-storage-blob azure-identity

    - name: Emit Event to Queue
      shell: bash
      env:
        EVENT_TYPE: ${{ inputs.event-type }}
        EVENT_NAME: ${{ inputs.event-name }}
        EVENT_SCRIPT: ${{ inputs.event-script }}
        AZURE_QUEUE_STORAGE_ACCOUNT: ${{ inputs.azure-queue-storage-account }}
        AZURE_QUEUE_NAME: ${{ inputs.azure-queue-name }}
      run: |
        python - <<EOF
        import os
        import json
        from azure.storage.queue import QueueServiceClient
        from azure.identity import DefaultAzureCredential

        # Create event data
        event = {
            "type": os.environ.get('EVENT_TYPE'),
            "name": os.environ.get('EVENT_NAME'),
            "script": os.environ.get('EVENT_SCRIPT')
        }
        print(f"Emitting event: {json.dumps(event, indent=2)}")

        # Create queue client using managed identity
        account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.queue.core.windows.net"
        queue_name = os.environ.get('AZURE_QUEUE_NAME')

        # Use DefaultAzureCredential which will automatically use the managed identity
        credential = DefaultAzureCredential()
        queue_service = QueueServiceClient(account_url=account_url, credential=credential)
        queue_client = queue_service.get_queue_client(queue_name)

        # Send event to queue
        queue_client.send_message(json.dumps(event))
        print(f"Successfully sent event to queue {queue_name}")
        EOF

    - name: Monitor Event Log
      id: monitor
      shell: bash
      env:
        EVENT_TYPE: ${{ inputs.event-type }}
        IS_UNIT_TEST: ${{ inputs.is-unit-test }}
        TIMEOUT: ${{ inputs.timeout }}
        AZURE_QUEUE_STORAGE_ACCOUNT: ${{ inputs.azure-queue-storage-account }}
        AZURE_BLOB_STORAGE: ${{ inputs.azure-blob-storage }}
      run: |
        python - <<EOF
        import os
        import json
        import time
        import uuid
        from azure.storage.blob import BlobServiceClient
        from azure.identity import DefaultAzureCredential

        def wait_for_log():
            """Wait for the event log to appear in blob storage"""
            account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.blob.core.windows.net"
            container_name = os.environ.get('AZURE_BLOB_STORAGE')
            blob_name = f"{os.environ.get('GITHUB_RUN_ID')}/{os.environ.get('EVENT_TYPE')}.json"

            blob_service = BlobServiceClient(account_url=account_url, credential=DefaultAzureCredential())
            container_client = blob_service.get_container_client(container_name)
            blob_client = container_client.get_blob_client(blob_name)

            # Calculate end time based on timeout
            timeout_minutes = int(os.environ.get('TIMEOUT', '10'))
            end_time = time.time() + (timeout_minutes * 60)
            print(f"Will poll for logs until {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}")

            while time.time() < end_time:
                try:
                    if blob_client.exists():
                        return blob_client.download_blob().readall()
                    remaining_time = int(end_time - time.time())
                    print(f"Log not found yet, timeout in {remaining_time} seconds")
                    time.sleep(2)
                except Exception as e:
                    print(f"Error checking for log: {e}")
                    time.sleep(2)

            raise TimeoutError(f"Log not found after {timeout_minutes} minutes")

        def check_coverage_exists():
            """Check if coverage tarball exists in blob storage"""
            account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.blob.core.windows.net"
            container_name = os.environ.get('AZURE_BLOB_STORAGE')
            blob_name = f"{os.environ.get('GITHUB_RUN_ID')}/{os.environ.get('EVENT_TYPE')}_coverage.tar.gz"

            blob_service = BlobServiceClient(account_url=account_url, credential=DefaultAzureCredential())
            container_client = blob_service.get_container_client(container_name)
            blob_client = container_client.get_blob_client(blob_name)

            return blob_client.exists()

        try:
            # Get event type from environment
            event_type = os.environ.get('EVENT_TYPE')
            print(f"Waiting for log for event type: {event_type}")

            # Wait for and download the log
            log_content = wait_for_log()
            log_data = json.loads(log_content)

            # Print the log contents
            print("\n=== Event Information ===")
            print(f"Type: {log_data['event']['type']}")
            print(f"Name: {log_data['event']['name']}")
            print(f"\n=== Execution Information ===")
            print(f"Worker ID: {log_data['execution']['worker_id']}")
            print(f"Run ID: {log_data['execution']['run_id']}")
            print(f"Timestamp: {log_data['execution']['timestamp']}")
            print(f"\n=== Script Output ===")
            print("STDOUT:")
            print(log_data['output']['stdout'])
            print("\nSTDERR:")
            print(log_data['output']['stderr'])
            print(f"\nExit Code: {log_data['execution']['exit_code']}")

            # Check for coverage data
            coverage_prefix = "unit-test" if os.environ.get('IS_UNIT_TEST') == "true" else "e2e"
            coverage_report = f"coverage-{coverage_prefix}-{os.environ.get('GITHUB_RUN_ID')}-{uuid.uuid4()}"
            print(f"coverage_report={coverage_report}")

            if check_coverage_exists():
                print("Found coverage data, will be uploaded as artifact")
                print(f"coverage_exists=true")
            else:
                print("No coverage data found")
                print(f"coverage_exists=false")

            # Exit with the same code as the script
            exit(log_data['execution']['exit_code'])

        except Exception as e:
            print(f"Error monitoring log: {e}")
            exit(1)
        EOF

    - name: Download Coverage Data
      if: steps.monitor.outputs.coverage_exists == 'true'
      shell: bash
      env:
        EVENT_TYPE: ${{ inputs.event-type }}
        AZURE_QUEUE_STORAGE_ACCOUNT: ${{ inputs.azure-queue-storage-account }}
        AZURE_BLOB_STORAGE: ${{ inputs.azure-blob-storage }}
      run: |
        python - <<EOF
        import os
        from azure.storage.blob import BlobServiceClient
        from azure.identity import DefaultAzureCredential

        account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.blob.core.windows.net"
        container_name = os.environ.get('AZURE_BLOB_STORAGE')
        blob_name = f"{os.environ.get('GITHUB_RUN_ID')}/{os.environ.get('EVENT_TYPE')}_coverage.tar.gz"

        blob_service = BlobServiceClient(account_url=account_url, credential=DefaultAzureCredential())
        container_client = blob_service.get_container_client(container_name)
        blob_client = container_client.get_blob_client(blob_name)

        with open("coverage.tar.gz", "wb") as f:
            f.write(blob_client.download_blob().readall())
        EOF

    - name: Extract Coverage Data
      if: steps.monitor.outputs.coverage_exists == 'true'
      shell: bash
      run: |
        tar xzf coverage.tar.gz
        rm coverage.tar.gz

    - name: Upload Coverage Artifact
      if: steps.monitor.outputs.coverage_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.monitor.outputs.coverage_report }}
        path: |
          coverage.xml
          .coverage
        include-hidden-files: true
