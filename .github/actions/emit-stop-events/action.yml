name: 'Emit Stop Events'
description: 'Emit stop events to the queue for each worker'

inputs:
  worker_configs:
    description: |
      JSON string containing list of worker configurations.
      Example: '[{"id": 1, "runner": "ubuntu-latest", "cpu-only": true}, {"id": 2, "runner": "windows-latest", "cpu-only": false}]'
    required: true
  queue_names:
    description: |
      JSON string containing mapping of runners to queue names.
      Example: '{"ubuntu-latest": "queue1", "windows-latest": "queue2"}'
    required: true
  azure-client-id:
    description: 'Azure Client ID'
    required: true
  azure-tenant-id:
    description: 'Azure Tenant ID'
    required: true
  azure-subscription-id:
    description: 'Azure Subscription ID'
    required: true
  azure-queue-storage-account:
    description: 'Azure Queue Storage Account'
    required: true

runs:
  using: "composite"
  steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Azure Storage SDK
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install azure-storage-queue azure-identity

    - name: Emit Stop Events
      shell: bash
      env:
        AZURE_QUEUE_STORAGE_ACCOUNT: ${{ inputs.azure-queue-storage-account }}
        WORKER_CONFIGS: ${{ inputs.worker_configs }}
        QUEUE_NAMES: ${{ inputs.queue_names }}
      run: |
        python - <<EOF
        import json
        import os
        from azure.identity import DefaultAzureCredential
        from azure.storage.queue import QueueClient

        # Debug: Print raw inputs
        print("Raw worker_configs input:", os.environ.get('WORKER_CONFIGS'))
        print("Raw queue_names input:", os.environ.get('QUEUE_NAMES'))

        try:
            # Parse inputs
            worker_configs = json.loads(os.environ.get('WORKER_CONFIGS', '[]'))
            queue_names = json.loads(os.environ.get('QUEUE_NAMES', '{}'))

            print("Parsed worker_configs:", worker_configs)
            print("Parsed queue_names:", queue_names)

            # Get Azure credentials
            credential = DefaultAzureCredential()
            account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.queue.core.windows.net"

            # Emit stop event for each worker
            for worker in worker_configs:
                runner = worker.get('runner', 'ubuntu-latest')
                queue_name = queue_names[runner]
                queue_client = QueueClient(account_url=account_url, queue_name=queue_name, credential=credential)

                # Create stop event
                stop_event = {
                    "type": "stop",
                    "worker_id": worker['id']
                }

                # Send message to queue
                queue_client.send_message(json.dumps(stop_event))
                print(f"Sent stop event for worker {worker['id']} to queue {queue_name}")
        except json.JSONDecodeError as e:
            print(f"Error parsing JSON: {e}")
            print(f"Error occurred at line {e.lineno}, column {e.colno}")
            print(f"Error message: {e.msg}")
            exit(1)
        except Exception as e:
            print(f"Unexpected error: {e}")
            exit(1)
        EOF
