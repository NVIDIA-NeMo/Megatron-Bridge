name: Azure Queue Events Template

on:
  workflow_call:
    inputs:
      worker_configs:
        description: |
          JSON string containing list of worker configurations for the matrix.
          Example: '[1, 2, 3]' or '[{"id": 1, "config": "value"}, {"id": 2, "config": "value"}]'
        required: true
        type: string
      events:
        description: |
          JSON string containing list of events to add to the queue.
          Example: '[{"type": "event1", "data": "value1"}, {"type": "event2", "data": "value2"}]'
        required: true
        type: string
    secrets:
      AZURE_BLOB_STORAGE:
        required: true
      AZURE_QUEUE_STORAGE_ACCOUNT:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

env:
  AZURE_QUEUE_STORAGE_ACCOUNT: ${{ secrets.AZURE_QUEUE_STORAGE_ACCOUNT }}
  AZURE_BLOB_STORAGE: ${{ secrets.AZURE_BLOB_STORAGE }}
  AZURE_STORAGE_QUEUE_NAME: events-queue-${{ github.run_id }}

jobs:
  process-events:
    runs-on: ubuntu-latest
    environment: nemo-ci
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Azure Queue
        uses: ./.github/actions/create-azure-queue
        with:
          queue-name: ${{ env.AZURE_STORAGE_QUEUE_NAME }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-queue-storage-account: ${{ secrets.AZURE_QUEUE_STORAGE_ACCOUNT }}

  read-events:
    name: read-events-${{ matrix.worker }}
    needs: process-events
    runs-on: ubuntu-latest
    environment: nemo-ci
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        worker: ${{ fromJson(inputs.worker_configs) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Docker Queue Worker
        uses: ./.github/actions/docker-queue-worker
        with:
          worker-id: ${{ matrix.worker }}
          queue-name: ${{ env.AZURE_STORAGE_QUEUE_NAME }}
          image: ubuntu
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-queue-storage-account: ${{ secrets.AZURE_QUEUE_STORAGE_ACCOUNT }}
          azure-blob-storage: ${{ secrets.AZURE_BLOB_STORAGE }}
          cpu-only: true

  monitor-logs:
    name: monitor-logs-${{ matrix.event.type }}
    needs: process-events
    runs-on: ubuntu-latest
    environment: nemo-ci
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        event: ${{ fromJson(inputs.events) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Azure Storage SDK
        run: |
          python -m pip install --upgrade pip
          pip install azure-storage-queue azure-storage-blob azure-identity

      - name: Emit Event to Queue
        run: |
          python - <<EOF
          import os
          import json
          from azure.storage.queue import QueueServiceClient
          from azure.identity import DefaultAzureCredential

          # Get event from matrix
          event = json.loads('''${{ toJSON(matrix.event) }}''')
          print(f"Emitting event: {json.dumps(event, indent=2)}")

          # Create queue client using managed identity
          account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.queue.core.windows.net"
          queue_name = os.environ.get('AZURE_STORAGE_QUEUE_NAME')

          # Use DefaultAzureCredential which will automatically use the managed identity
          credential = DefaultAzureCredential()
          queue_service = QueueServiceClient(account_url=account_url, credential=credential)
          queue_client = queue_service.get_queue_client(queue_name)

          # Send event to queue
          queue_client.send_message(json.dumps(event))
          print(f"Successfully sent event to queue {queue_name}")
          EOF

      - name: Monitor Event Log
        run: |
          python - <<EOF
          import os
          import json
          import time
          from azure.storage.blob import BlobServiceClient
          from azure.identity import DefaultAzureCredential

          def wait_for_log():
              """Wait for the event log to appear in blob storage"""
              account_url = f"https://{os.environ.get('AZURE_QUEUE_STORAGE_ACCOUNT')}.blob.core.windows.net"
              container_name = os.environ.get('AZURE_BLOB_STORAGE')
              blob_name = f"{os.environ.get('GITHUB_RUN_ID')}/{os.environ.get('EVENT_TYPE')}.json"

              blob_service = BlobServiceClient(account_url=account_url, credential=DefaultAzureCredential())
              container_client = blob_service.get_container_client(container_name)
              blob_client = container_client.get_blob_client(blob_name)

              max_attempts = 30
              attempt = 0
              while attempt < max_attempts:
                  try:
                      if blob_client.exists():
                          return blob_client.download_blob().readall()
                      print(f"Log not found yet, attempt {attempt + 1}/{max_attempts}")
                      time.sleep(2)
                      attempt += 1
                  except Exception as e:
                      print(f"Error checking for log: {e}")
                      time.sleep(2)
                      attempt += 1

              raise TimeoutError(f"Log not found after {max_attempts} attempts")

          try:
              # Get event type from matrix
              event_type = os.environ.get('EVENT_TYPE')
              print(f"Waiting for log for event type: {event_type}")

              # Wait for and download the log
              log_content = wait_for_log()
              log_data = json.loads(log_content)

              # Print the log contents
              print("\n=== Event Information ===")
              print(f"Type: {log_data['event']['type']}")
              print(f"Name: {log_data['event']['name']}")
              print(f"\n=== Execution Information ===")
              print(f"Worker ID: {log_data['execution']['worker_id']}")
              print(f"Run ID: {log_data['execution']['run_id']}")
              print(f"Timestamp: {log_data['execution']['timestamp']}")
              print(f"\n=== Script Output ===")
              print("STDOUT:")
              print(log_data['output']['stdout'])
              print("\nSTDERR:")
              print(log_data['output']['stderr'])
              print(f"\nExit Code: {log_data['execution']['exit_code']}")

              # Exit with the same code as the script
              exit(log_data['execution']['exit_code'])

          except Exception as e:
              print(f"Error monitoring log: {e}")
              exit(1)
          EOF
        env:
          EVENT_TYPE: ${{ matrix.event.type }}

  delete-queue:
    needs: [read-events]
    if: always()  # Run even if other jobs were cancelled
    runs-on: ubuntu-latest
    environment: nemo-ci
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete Queue
        uses: ./.github/actions/delete-azure-queue
        with:
          queue-name: ${{ env.AZURE_STORAGE_QUEUE_NAME }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-queue-storage-account: ${{ secrets.AZURE_QUEUE_STORAGE_ACCOUNT }}

  stop-workers:
    needs: [monitor-logs]
    if: always()  # Run even if other jobs were cancelled
    runs-on: ubuntu-latest
    environment: nemo-ci
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Emit Stop Events
        uses: ./.github/actions/emit-stop-events
        with:
          queue-name: ${{ env.AZURE_STORAGE_QUEUE_NAME }}
          num-workers: 3
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          azure-queue-storage-account: ${{ secrets.AZURE_QUEUE_STORAGE_ACCOUNT }}
