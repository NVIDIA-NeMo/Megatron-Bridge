name: ~Update dependencies template
on:
  workflow_call:
    inputs:
      target-branch:
        required: true
        type: string
        description: "The target branch to bump"
    secrets:
      PAT:
        required: true
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      SSH_KEY:
        required: true
      SSH_PWD:
        required: true

jobs:
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      bump-branch: bump-ci-container-${{ steps.ref.outputs.date }}-${{ inputs.target-branch }}
      date: ${{ steps.ref.outputs.date }}
    steps:
      - name: Get date
        id: ref
        run: echo "date=$(date +%F)" | tee -a "$GITHUB_OUTPUT"

  update-lockfile:
    environment: main
    runs-on: ubuntu-latest
    needs: [pre-flight]
    env:
      SOURCE_BRANCH: ${{ needs.pre-flight.outputs.bump-branch }}
      TARGET_BRANCH: ${{ inputs.target-branch }}
    steps:
      - name: Free up disk space (action)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false

      - name: Free up disk space (additional)
        run: |
          START_TIME=$(date +%s)
          echo "========================================="
          echo "Starting disk cleanup at $(date)"
          echo "========================================="
          echo "Disk space before cleanup:"
          df -h
          echo ""
          
          # Remove unnecessary packages and files (~30GB)
          echo "[1/7] Removing .NET runtime..."
          time sudo rm -rf /usr/share/dotnet
          echo "‚úì Done"
          
          echo "[2/7] Removing Android SDK..."
          time sudo rm -rf /usr/local/lib/android
          echo "‚úì Done"
          
          echo "[3/7] Removing GHC, CodeQL, Boost, JVM, Swift..."
          time sudo rm -rf /opt/ghc /opt/hostedtoolcache/CodeQL /usr/local/share/boost /usr/lib/jvm /usr/share/swift
          echo "‚úì Done"
          
          echo "[4/7] Removing large packages (databases, browsers, cloud tools)..."
          time sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-cloud-sdk google-chrome-stable firefox powershell mono-devel 2>/dev/null || true
          echo "  Running autoremove..."
          time sudo apt-get autoremove -y
          time sudo apt-get clean
          echo "‚úì Done"
          
          echo "[5/7] Cleaning up Docker (images, containers, volumes)..."
          time docker system prune -af --volumes
          echo "‚úì Done"
          
          echo "[6/7] Cleaning package manager caches..."
          time sudo rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* /root/.cache/pip /home/runner/.cache/pip /root/.npm /home/runner/.npm
          echo "‚úì Done"
          
          echo "[7/7] Removing documentation and man pages..."
          time sudo rm -rf /usr/share/man/* /usr/share/doc/*
          echo "‚úì Done"
          
          echo "[8/8] Additional aggressive cleanup..."
          # Remove more language runtimes
          sudo rm -rf /opt/az
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/lib/node_modules
          # Clean temp directories
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          # Clean system logs
          sudo journalctl --vacuum-time=1s 2>/dev/null || true
          sudo rm -rf /var/log/*
          # Remove more caches
          sudo rm -rf ~/.cache
          sudo rm -rf /var/cache/*
          echo "‚úì Done"
          
          END_TIME=$(date +%s)
          ELAPSED=$((END_TIME - START_TIME))
          echo ""
          echo "========================================="
          echo "Cleanup complete in ${ELAPSED} seconds!"
          echo "========================================="
          echo "Disk space after cleanup:"
          df -h
          echo "Disk inodes after cleanup:"
          df -i
          echo ""

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          submodules: recursive

      - name: Configure Docker for disk efficiency
        run: |
          # Configure Docker to use overlay2 with more efficient settings
          sudo systemctl stop docker
          sudo rm -rf /var/lib/docker
          sudo mkdir -p /var/lib/docker
          
          # Create daemon config for efficiency
          sudo tee /etc/docker/daemon.json > /dev/null <<EOF
          {
            "storage-driver": "overlay2",
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            }
          }
          EOF
          
          sudo systemctl start docker
          echo "Docker configured for disk efficiency"

      - name: Build container
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          DOCKER_BUILDKIT: 1
          BUILDKIT_STEP_LOG_MAX_SIZE: 10000000
          BUILDKIT_STEP_LOG_MAX_SPEED: 10000000
        run: |
          echo "Disk space before Docker build:"
          df -h
          
          # Clean up any existing Docker data before building
          docker system prune -af --volumes || true
          
          echo "Building container with BuildKit..."
          docker build -f docker/Dockerfile.ci --secret id=GH_TOKEN -t megatron-bridge . 2>&1 | tee build.log || {
            echo "‚ùå Build failed!"
            echo "Disk space at failure:"
            df -h
            df -i
            echo ""
            echo "Docker disk usage:"
            docker system df
            echo ""
            echo "Last 100 lines of build log:"
            tail -100 build.log
            exit 1
          }
          
          echo "‚úÖ Build successful!"
          
          # Clean up dangling images and build cache after build
          docker image prune -f
          docker builder prune -af
          
          echo "Disk space after build:"
          df -h
          echo "Docker disk usage:"
          docker system df

      - name: Create bump branch if not exists
        run: |
          if ! git ls-remote --exit-code origin $SOURCE_BRANCH; then
            git checkout -b $SOURCE_BRANCH $TARGET_BRANCH
            git push origin $SOURCE_BRANCH
          fi

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SOURCE_BRANCH }}
          submodules: recursive

      - name: Update submodules
        run: |
          cd 3rdparty/Megatron-LM
          git fetch origin dev
          git checkout FETCH_HEAD

      - name: Upgrade lock file
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          docker run \
          --rm \
          -v $(pwd):/opt/Megatron-Bridge \
          -w /opt/Megatron-Bridge \
          -e GH_TOKEN=${{ secrets.PAT }} \
          megatron-bridge \
          bash -c 'uv lock --upgrade'

      - name: Upload lock file
        uses: actions/upload-artifact@v4
        with:
          name: lock-file-${{ env.SOURCE_BRANCH }}
          path: uv.lock

  create-pr:
    needs: [update-lockfile, pre-flight]
    runs-on: ubuntu-latest
    environment: main
    outputs:
      pr-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
    env:
      SOURCE_BRANCH: ${{ needs.pre-flight.outputs.bump-branch }}
      TARGET_BRANCH: ${{ inputs.target-branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          ref: ${{ env.TARGET_BRANCH }}

      - name: Create Bump PR
        uses: peter-evans/create-pull-request@v6
        id: create-pull-request
        env:
          title: "chore(beep boop ü§ñ): Bump `uv.lock` (${{ inputs.target-branch}}) (${{ needs.pre-flight.outputs.date }})"
        with:
          branch: ${{ env.SOURCE_BRANCH }}
          base: ${{ env.TARGET_BRANCH }}
          title: ${{ env.title }}
          token: ${{ secrets.PAT }}
          body: |
            üöÄ PR to bump `uv.lock` in `${{ inputs.target-branch }}`.  

            üìù This PR will be automatically merged if all CI checks pass successfully.
            If any CI checks fail, the PR will remain open for manual review.

            ü§ñ **Auto-merge enabled** - No manual action required if CI passes.
          commit-message: ${{ env.title }}
          signoff: true

  auto-merge:
    needs: [create-pr, pre-flight]
    runs-on: ubuntu-latest
    if: needs.create-pr.outputs.pr-number != ''
    env:
      PR_NUMBER: ${{ needs.create-pr.outputs.pr-number }}
      TARGET_BRANCH: ${{ inputs.target-branch }}
      GH_TOKEN: ${{ secrets.PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Wait for CI checks and auto-merge
        run: |
          echo "Monitoring PR #${PR_NUMBER} for CI check completion..."
          
          MAX_ATTEMPTS=144  # Wait up to 12 hours (144 attempts * 5 minutes)
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking CI status..."
            
            # Get PR status checks
            STATUS_JSON=$(gh pr view ${PR_NUMBER} --json statusCheckRollup)
            
            # Count total checks, successful checks, and failed checks
            TOTAL_CHECKS=$(echo "$STATUS_JSON" | jq '.statusCheckRollup | length')
            
            if [ "$TOTAL_CHECKS" -eq 0 ]; then
              echo "No status checks found yet. Waiting..."
              sleep 300
              continue
            fi
            
            PENDING_CHECKS=$(echo "$STATUS_JSON" | jq '[.statusCheckRollup[] | select(.conclusion == null or .conclusion == "" or .status == "IN_PROGRESS" or .status == "PENDING" or .status == "QUEUED")] | length')
            FAILED_CHECKS=$(echo "$STATUS_JSON" | jq '[.statusCheckRollup[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED" or .conclusion == "TIMED_OUT")] | length')
            SUCCESS_CHECKS=$(echo "$STATUS_JSON" | jq '[.statusCheckRollup[] | select(.conclusion == "SUCCESS")] | length')
            
            echo "Status: $SUCCESS_CHECKS successful, $FAILED_CHECKS failed, $PENDING_CHECKS pending (out of $TOTAL_CHECKS total)"
            
            # If any checks failed, exit and leave PR open
            if [ "$FAILED_CHECKS" -gt 0 ]; then
              echo "‚ùå CI checks failed. Leaving PR open for manual review."
              echo "Failed checks:"
              echo "$STATUS_JSON" | jq -r '.statusCheckRollup[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED" or .conclusion == "TIMED_OUT") | "  - \(.name): \(.conclusion)"'
              exit 0
            fi
            
            # If all checks are done and successful, merge
            if [ "$PENDING_CHECKS" -eq 0 ] && [ "$SUCCESS_CHECKS" -gt 0 ]; then
              echo "‚úÖ All CI checks passed! Auto-merging PR #${PR_NUMBER}..."
              
              # Merge the PR
              gh pr merge ${PR_NUMBER} --squash --auto --delete-branch
              
              echo "‚úÖ PR #${PR_NUMBER} has been merged successfully!"
              exit 0
            fi
            
            # Still waiting for checks to complete
            echo "Waiting for pending checks to complete..."
            sleep 300
          done
          
          echo "‚è±Ô∏è  Timeout reached. PR #${PR_NUMBER} will remain open for manual review."
          exit 0
